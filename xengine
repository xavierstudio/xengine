#if 0
	shc Version 3.8.9b, Generic Script Compiler
	Copyright (c) 1994-2015 Francisco Rosales <frosal@fi.upm.es>

	shc -rvTf xengine.source 
#endif

static  char data [] = 
#define      tst1_z	22
#define      tst1	((&data[2]))
	"\230\315\301\227\001\235\365\353\144\360\250\234\015\041\072\174"
	"\302\365\200\350\203\173\056\063\371\032\031\100"
#define      lsto_z	3
#define      lsto	((&data[28]))
	"\347\075\153"
#define      chk2_z	19
#define      chk2	((&data[31]))
	"\351\205\216\310\206\115\021\376\334\107\330\130\321\137\077\247"
	"\010\033\025\335\321\276\366"
#define      xecc_z	18
#define      xecc	((&data[56]))
	"\313\100\351\201\001\305\056\376\001\272\346\272\025\336\045\203"
	"\330\211\000\174\276"
#define      tst2_z	19
#define      tst2	((&data[78]))
	"\004\015\120\345\146\037\003\047\371\046\105\035\247\346\130\021"
	"\112\303\010\074\351\207\211\210\015\041"
#define      chk1_z	22
#define      chk1	((&data[101]))
	"\330\143\061\055\160\060\156\351\101\353\155\011\222\022\157\354"
	"\155\040\277\221\177\062\157"
#define      inlo_z	3
#define      inlo	((&data[124]))
	"\131\330\015"
#define      msg2_z	19
#define      msg2	((&data[130]))
	"\070\206\114\145\220\360\043\103\033\026\163\003\027\201\300\144"
	"\354\045\136\023\032\030\366\175"
#define      rlax_z	1
#define      rlax	((&data[151]))
	"\351"
#define      opts_z	1
#define      opts	((&data[152]))
	"\206"
#define      text_z	933
#define      text	((&data[255]))
	"\137\175\325\351\006\342\013\134\351\107\314\060\372\050\200\243"
	"\243\271\051\357\257\247\223\026\160\001\275\367\135\055\175\274"
	"\253\122\245\262\065\260\016\036\370\332\116\362\003\317\225\246"
	"\210\277\226\070\146\051\116\327\053\013\317\210\071\114\105\345"
	"\236\353\227\323\234\246\362\224\201\100\206\204\020\034\053\230"
	"\334\301\320\103\353\036\032\027\052\351\240\144\066\345\111\324"
	"\321\341\250\155\207\232\271\141\343\012\062\345\106\060\014\374"
	"\222\132\043\021\353\001\335\150\000\171\255\362\244\261\172\270"
	"\306\155\025\166\030\150\305\111\255\205\176\136\160\113\060\125"
	"\345\307\141\270\162\353\242\110\061\105\354\006\111\127\350\176"
	"\271\343\247\151\323\020\107\331\073\163\346\074\100\256\274\321"
	"\224\300\362\127\344\106\347\001\051\263\045\110\017\332\372\076"
	"\064\337\114\332\210\076\172\014\246\230\041\167\045\042\270\203"
	"\273\337\006\021\056\161\022\035\243\155\264\310\366\123\316\271"
	"\163\146\000\005\357\337\173\370\146\140\132\257\153\063\264\273"
	"\310\136\176\004\105\260\275\160\337\215\140\052\253\122\306\003"
	"\050\063\131\214\004\151\220\164\101\031\340\176\152\100\331\370"
	"\010\017\335\013\053\352\205\046\255\343\344\055\316\302\174\372"
	"\042\151\136\112\332\223\205\137\323\236\034\225\116\003\257\341"
	"\033\013\354\017\031\371\341\167\005\302\242\105\015\312\366\051"
	"\117\004\275\062\156\140\343\047\163\140\205\020\016\050\025\151"
	"\065\170\125\270\342\025\047\075\005\265\315\360\260\120\305\250"
	"\352\144\150\131\357\072\165\361\120\022\156\261\074\343\245\210"
	"\344\126\260\004\226\240\325\131\327\147\211\047\360\061\202\071"
	"\255\162\137\306\165\301\167\247\334\346\105\114\260\154\063\071"
	"\273\007\041\334\022\305\006\063\325\040\061\263\133\152\065\264"
	"\034\353\174\254\245\067\155\357\206\170\361\214\201\255\051\220"
	"\356\142\134\021\221\022\125\026\137\325\040\300\251\274\026\303"
	"\056\334\222\325\117\147\256\213\351\141\313\051\370\133\113\202"
	"\133\116\313\066\015\072\257\217\365\033\217\134\315\160\363\120"
	"\033\045\147\235\241\257\055\124\126\240\351\054\032\212\141\101"
	"\143\331\064\161\114\314\134\162\324\111\161\002\157\024\222\324"
	"\354\202\143\311\303\327\312\002\025\213\035\046\161\162\224\357"
	"\345\337\156\207\206\142\161\271\242\367\253\355\066\067\130\317"
	"\273\236\306\044\011\263\215\146\052\304\115\270\370\311\145\040"
	"\145\236\376\350\374\210\061\357\241\067\372\123\015\301\373\217"
	"\040\121\215\043\340\053\344\203\206\134\326\274\341\275\075\374"
	"\232\025\022\276\113\136\240\052\016\016\137\154\023\130\142\305"
	"\161\214\162\345\106\034\204\260\130\044\052\233\005\031\263\224"
	"\164\212\166\273\114\006\227\017\367\227\120\254\035\047\356\240"
	"\207\247\354\006\330\267\305\016\036\312\372\367\323\026\151\075"
	"\176\022\174\173\373\257\250\213\102\145\202\056\035\042\361\123"
	"\234\101\356\350\032\130\047\003\010\275\210\257\017\326\210\124"
	"\300\034\203\365\153\043\075\134\243\027\237\255\017\361\024\110"
	"\036\376\323\304\022\176\145\353\131\142\077\111\156\323\340\312"
	"\267\265\271\142\215\236\204\264\241\355\374\062\300\173\340\160"
	"\326\123\013\002\061\017\042\063\030\226\053\226\376\106\212\276"
	"\345\071\022\302\227\077\233\364\333\305\056\153\215\003\114\333"
	"\335\226\223\052\346\374\124\301\216\336\050\247\215\073\341\004"
	"\217\114\023\044\376\344\027\035\043\053\004\236\366\267\220\103"
	"\036\220\132\076\052\204\247\375\220\172\007\010\133\175\007\375"
	"\070\250\262\307\117\103\215\341\063\105\107\326\132\312\343\323"
	"\300\070\320\157\361\262\072\340\261\120\272\172\351\357\117\042"
	"\216\344\325\043\056\275\365\326\014\045\022\202\215\225\247\341"
	"\225\043\000\123\326\144\170\041\005\003\245\220\151\133\341\120"
	"\356\071\200\206\022\332\100\352\372\055\275\013\202\304\230\115"
	"\121\053\313\053\137\345\375\373\041\331\374\237\222\233\001\025"
	"\116\141\072\074\013\162\341\121\074\200\000\143\263\014\251\064"
	"\160\330\323\343\144\071\052\343\365\274\115\140\250\303\103\223"
	"\150\263\301\176\162\151\140\100\223\165\272\110\355\042\115\032"
	"\154\070\157\025\012\156\072\025\177\104\375\367\100\240\070\300"
	"\004\366\365\024\046\332\243\241\161\234\104\003\351\322\106\150"
	"\277\216\336\146\274\350\264\356\115\022\304\004\316\360\014\104"
	"\326\335\162\176\156\030\046\200\244\041\233\023\103\240\052\131"
	"\043\112\304\211\123\170\135\013\061\325\017\001\010\333\210\215"
	"\354\245\270\204\201\172\125\305\146\164\337\175\236\311\035\003"
	"\000\003\114\324\324\056\175\101\265\030\103\276\364\313\113\340"
	"\161\004\145\363\176\272\270\345\056\230\142\315\142\200\320\142"
	"\203\035\067\130\113\264\231\001\315\335\277\301\251\013\242\032"
	"\020\007\015\217\301\306\164\360\136\326\276\300\126\216\042\332"
	"\254\132\062\370\017\314\371\334\252\271\236\123\304\100\156\325"
	"\107\173\144\011\102\330\371\240\256\267\141\005\106\204\340\363"
	"\336\023\353\355"
#define      pswd_z	256
#define      pswd	((&data[1367]))
	"\212\235\150\336\142\250\114\067\357\310\233\370\012\164\362\253"
	"\043\251\014\050\360\221\011\343\157\035\316\135\375\262\047\210"
	"\120\217\146\263\067\263\353\047\173\207\037\206\373\021\061\036"
	"\273\076\107\253\320\120\217\077\156\135\063\151\324\073\045\003"
	"\123\001\027\131\164\264\070\005\350\147\303\164\233\213\231\141"
	"\207\370\164\301\277\116\016\135\047\102\306\374\175\353\377\321"
	"\355\027\052\142\313\143\147\263\312\053\050\146\266\301\310\076"
	"\272\075\377\171\213\015\326\263\117\234\257\315\210\256\236\166"
	"\305\310\330\221\054\100\105\367\153\155\135\041\057\046\140\351"
	"\143\137\143\357\155\071\242\275\326\121\212\137\000\050\325\305"
	"\361\256\126\035\356\234\024\131\011\162\173\070\231\333\041\375"
	"\073\205\355\250\276\217\145\225\341\360\365\341\031\312\247\012"
	"\171\376\050\147\232\075\301\243\260\075\333\112\030\375\107\124"
	"\202\064\374\101\304\142\327\246\123\314\210\154\227\057\167\021"
	"\056\240\170\310\335\072\154\216\167\110\330\220\105\037\345\310"
	"\124\341\012\031\104\341\277\227\256\110\004\106\167\173\127\245"
	"\033\320\156\371\013\332\207\203\042\137\023\150\177\370\061\324"
	"\332\073\355\037\035\255\267\314\365\273\023\155\067\152\023\122"
	"\073\201\113\106\134\323\311\177\062\335\347\261\326\031\206\261"
	"\124\163\321\162\041\210\077\027\104\122\235\153\020\304\364\140"
	"\124\133\024\213\016\377\263\212\206\322\021\201\344\103\240\240"
	"\202\347\114\122\070\333\222\246\070\057\022\110\364\007\251\110"
	"\142\275\324\161\275\207\374\103\132\016\305\077\121"
#define      msg1_z	42
#define      msg1	((&data[1683]))
	"\115\054\046\205\007\270\054\077\347\327\106\311\276\305\136\136"
	"\347\027\036\370\150\122\356\342\061\202\332\136\241\121\155\174"
	"\166\163\140\366\210\366\176\057\052\331\055\257\023\302\035\225"
	"\203\172\275\077\210\334\106\062\044\251\360\370"
#define      date_z	1
#define      date	((&data[1734]))
	"\112"
#define      shll_z	14
#define      shll	((&data[1738]))
	"\046\267\032\125\270\107\234\361\373\360\314\040\363\220\146\274"
	"\014\167\035\371"/* End of data[] */;
#define      hide_z	4096
#define DEBUGEXEC	0	/* Define as 1 to debug execvp calls */
#define TRACEABLE	1	/* Define as 1 to enable ptrace the executable */

/* rtc.c */

#include <sys/stat.h>
#include <sys/types.h>

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

/* 'Alleged RC4' */

static unsigned char stte[256], indx, jndx, kndx;

/*
 * Reset arc4 stte. 
 */
void stte_0(void)
{
	indx = jndx = kndx = 0;
	do {
		stte[indx] = indx;
	} while (++indx);
}

/*
 * Set key. Can be used more than once. 
 */
void key(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		do {
			tmp = stte[indx];
			kndx += tmp;
			kndx += ptr[(int)indx % len];
			stte[indx] = stte[kndx];
			stte[kndx] = tmp;
		} while (++indx);
		ptr += 256;
		len -= 256;
	}
}

/*
 * Crypt data. 
 */
void arc4(void * str, int len)
{
	unsigned char tmp, * ptr = (unsigned char *)str;
	while (len > 0) {
		indx++;
		tmp = stte[indx];
		jndx += tmp;
		stte[indx] = stte[jndx];
		stte[jndx] = tmp;
		tmp += stte[indx];
		*ptr ^= stte[tmp];
		ptr++;
		len--;
	}
}

/* End of ARC4 */

/*
 * Key with file invariants. 
 */
int key_with_file(char * file)
{
	struct stat statf[1];
	struct stat control[1];

	if (stat(file, statf) < 0)
		return -1;

	/* Turn on stable fields */
	memset(control, 0, sizeof(control));
	control->st_ino = statf->st_ino;
	control->st_dev = statf->st_dev;
	control->st_rdev = statf->st_rdev;
	control->st_uid = statf->st_uid;
	control->st_gid = statf->st_gid;
	control->st_size = statf->st_size;
	control->st_mtime = statf->st_mtime;
	control->st_ctime = statf->st_ctime;
	key(control, sizeof(control));
	return 0;
}

#if DEBUGEXEC
void debugexec(char * sh11, int argc, char ** argv)
{
	int i;
	fprintf(stderr, "shll=%s\n", sh11 ? sh11 : "<null>");
	fprintf(stderr, "argc=%d\n", argc);
	if (!argv) {
		fprintf(stderr, "argv=<null>\n");
	} else { 
		for (i = 0; i <= argc ; i++)
			fprintf(stderr, "argv[%d]=%.60s\n", i, argv[i] ? argv[i] : "<null>");
	}
}
#endif /* DEBUGEXEC */

void rmarg(char ** argv, char * arg)
{
	for (; argv && *argv && *argv != arg; argv++);
	for (; argv && *argv; argv++)
		*argv = argv[1];
}

int chkenv(int argc)
{
	char buff[512];
	unsigned long mask, m;
	int l, a, c;
	char * string;
	extern char ** environ;

	mask  = (unsigned long)&chkenv;
	mask ^= (unsigned long)getpid() * ~mask;
	sprintf(buff, "x%lx", mask);
	string = getenv(buff);
#if DEBUGEXEC
	fprintf(stderr, "getenv(%s)=%s\n", buff, string ? string : "<null>");
#endif
	l = strlen(buff);
	if (!string) {
		/* 1st */
		sprintf(&buff[l], "=%lu %d", mask, argc);
		putenv(strdup(buff));
		return 0;
	}
	c = sscanf(string, "%lu %d%c", &m, &a, buff);
	if (c == 2 && m == mask) {
		/* 3rd */
		rmarg(environ, &string[-l - 1]);
		return 1 + (argc - a);
	}
	return -1;
}

#if !defined(TRACEABLE)

#define _LINUX_SOURCE_COMPAT
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <unistd.h>

#if !defined(PTRACE_ATTACH) && defined(PT_ATTACH)
#	define PTRACE_ATTACH	PT_ATTACH
#endif
void untraceable(char * argv0)
{
	char proc[80];
	int pid, mine;

	switch(pid = fork()) {
	case  0:
		pid = getppid();
		/* For problematic SunOS ptrace */
#if defined(__FreeBSD__)
		sprintf(proc, "/proc/%d/mem", (int)pid);
#else
		sprintf(proc, "/proc/%d/as",  (int)pid);
#endif
		close(0);
		mine = !open(proc, O_RDWR|O_EXCL);
		if (!mine && errno != EBUSY)
			mine = !ptrace(PTRACE_ATTACH, pid, 0, 0);
		if (mine) {
			kill(pid, SIGCONT);
		} else {
			perror(argv0);
			kill(pid, SIGKILL);
		}
		_exit(mine);
	case -1:
		break;
	default:
		if (pid == waitpid(pid, 0, 0))
			return;
	}
	perror(argv0);
	_exit(1);
}
#endif /* !defined(TRACEABLE) */

char * xsh(int argc, char ** argv)
{
	char * scrpt;
	int ret, i, j;
	char ** varg;
	char * me = argv[0];

	stte_0();
	 key(pswd, pswd_z);
	arc4(msg1, msg1_z);
	arc4(date, date_z);
	if (date[0] && (atoll(date)<time(NULL)))
		return msg1;
	arc4(shll, shll_z);
	arc4(inlo, inlo_z);
	arc4(xecc, xecc_z);
	arc4(lsto, lsto_z);
	arc4(tst1, tst1_z);
	 key(tst1, tst1_z);
	arc4(chk1, chk1_z);
	if ((chk1_z != tst1_z) || memcmp(tst1, chk1, tst1_z))
		return tst1;
	ret = chkenv(argc);
	arc4(msg2, msg2_z);
	if (ret < 0)
		return msg2;
	varg = (char **)calloc(argc + 10, sizeof(char *));
	if (!varg)
		return 0;
	if (ret) {
		arc4(rlax, rlax_z);
		if (!rlax[0] && key_with_file(shll))
			return shll;
		arc4(opts, opts_z);
		arc4(text, text_z);
		arc4(tst2, tst2_z);
		 key(tst2, tst2_z);
		arc4(chk2, chk2_z);
		if ((chk2_z != tst2_z) || memcmp(tst2, chk2, tst2_z))
			return tst2;
		/* Prepend hide_z spaces to script text to hide it. */
		scrpt = malloc(hide_z + text_z);
		if (!scrpt)
			return 0;
		memset(scrpt, (int) ' ', hide_z);
		memcpy(&scrpt[hide_z], text, text_z);
	} else {			/* Reexecute */
		if (*xecc) {
			scrpt = malloc(512);
			if (!scrpt)
				return 0;
			sprintf(scrpt, xecc, me);
		} else {
			scrpt = me;
		}
	}
	j = 0;
	varg[j++] = argv[0];		/* My own name at execution */
	if (ret && *opts)
		varg[j++] = opts;	/* Options on 1st line of code */
	if (*inlo)
		varg[j++] = inlo;	/* Option introducing inline code */
	varg[j++] = scrpt;		/* The script itself */
	if (*lsto)
		varg[j++] = lsto;	/* Option meaning last option */
	i = (ret > 1) ? ret : 0;	/* Args numbering correction */
	while (i < argc)
		varg[j++] = argv[i++];	/* Main run-time arguments */
	varg[j] = 0;			/* NULL terminated array */
#if DEBUGEXEC
	debugexec(shll, j, varg);
#endif
	execvp(shll, varg);
	return shll;
}

int main(int argc, char ** argv)
{
#if DEBUGEXEC
	debugexec("main", argc, argv);
#endif
#if !defined(TRACEABLE)
	untraceable(argv[0]);
#endif
	argv[1] = xsh(argc, argv);
	fprintf(stderr, "%s%s%s: %s\n", argv[0],
		errno ? ": " : "",
		errno ? strerror(errno) : "",
		argv[1] ? argv[1] : "<null>"
	);
	return 1;
}
